Sakura Library
==============

[1] http://alma.mtk.nao.ac.jp/j/


Overview
--------

Sakura is a high performance library for astronomical data analysis, developed by the ALMA Computing Team of the National Astronomical Observatory of Japan (NAOJ).

ALMA - Atacama Large Millimeter/submillimeter Array - is the largest astronomical project in existence: a single telescope of revolutionary design, composed of 66 high precision antennas located on the Chajnantor plateau, 5000 meters altitude in northern Chile.

Sakura is optimized to use Single Instruction Multiple Data (SIMD) instructions.
SIMD instructions boost performances by leveraging data level parallelism features commonly available in modern CPUs.

For more information in Japanese, please refer to the official ALMA web page of NAOJ [1], and search for Sakura.

Installation
------------

Sakura is currently distributed in source form only.
You have to build Sakura from source to install the library.
Please refer to the Installation Procedure section below for details.

Supported Platforms
-------------------

Sakura should work on any platform fulfilling the prerequisites listed in the Installation Procedure. 

Tested Platforms
----------------

Sakura has been successfully tested on the following platforms
- Red Hat Enterprise Linux 5 (RHEL5)
- Red Hat Enterprise Linux 6 (RHEL6)
- Canonical Ubuntu 14.4
- Apple OS X 10.8

Installation Procedure
----------------------

Sakura installation procedure is broken into 5 steps:
1. Prerequisites
2. Downloading the source
3. Building
4. Testing
5. Final install

1. Prerequisites
--------------------------

1.1 Prerequisites common to Linux and Apple OS X Operating Systems
1.1.1 Prerequisites coming from dependencies of the build system on software tools
* cmake 2.8 or higher
* doxygen 1.8 or higher
* gtest 1.7 or higher

1.1.2 Prerequisites coming from dependencies of Sakura on third-party external libraries
* eigen 3.2 or higher
* fftw 3.3.2 or higher. If you build fftw3 from source, use the configure options "--enable-float" and "--enable-shared" to build libfftw3 as a shared library.

1.2 Linux specific Prerequisites
* C++ compiler with C++11 support (gcc/g++ 4.8 or higher or clang/clang++ 3.5 or higher). Note: default gcc/g++ on RHEL5 and RHEL6 is not compliant with this requirement, so you must install a compliant compiler to build Sakura on these operating systems.

1.3 Apple OS X specific Prerequisites
* xcode 5.1 or higher
  - There is a case where command line tools is needed ??? To clarify 

2. Downloading the Source
-------------------------

Sakura library source code releases are distributed in gzip-compressed tarballs.
Download with:

ftp://anonymous:ftp@alma-dl.mtk.nao.ac.jp/sakura/release/libsakura-src-X.Y.Z.tar.gz

3. Building
-----------

Once the package is downloaded, expand it with tar command as bellow. :

   $ tar -xvzf libsakura-src-X.Y.Z.tar.gz

 Sakura library uses Google Test framework (gtest) to run unit tests. Expand a gtest bundle and create a symbolic link to it in libsakura directory. The following example shows how to do it using gtest-1.7.0.zip.:

   $ unzip gtest-1.7.0.zip -d libsakura
   $ cd libsakura
   $ ln -s gtest-1.7.0 gtest


 When the preparation of gtest was successful, you can set up a build of Sakura library. To build Sakura library you need to tell your build system where depended external libraries are placed and their version numbers. Cmake allows you to do it quickly and set up build easily.


### Setting up Using Cmake ###

 You will be able to set up with attached CMakeLists.txt which has necessary configuration to run Cmake correctly. Cmake will create MakeFile which corresponds to your build environment. In case you put libsakura directory in the current directory, the procedure of Cmake is as below:

gcc:
   $ cd libsakura/build
   $ cmake -D CMAKE_MODULE_PATH=../cmake-modules -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX:PATH=/usr/local/lib/libsakura -D BUILD_DOC=BOOL:ON ..

clang: (especially for Mac users)
   $ cd libsakura/build
   $ env CC=clang CXX=clang++ cmake -D CMAKE_MODULE_PATH=../cmake-modules -D CMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local/lib/libsakura -D BUILD_DOC:BOOL=ON ..


 For external libraries, fftw3 and eigen, you may need to set FFTW3_ROOT_DIR and/or EIGEN3_INCLUDE_DIR to tell cmake where you installed these libraries in case your install path is not a standard place.

cmake option:
* CMAKE_MODULE_PATH
   Specify the place where supplemental module (e.g. FindFFTW3.cmake etc.) is placed.
* CMAKE_BUILD_TYPE
   Specify a build type. This allows you to select a compiler flag as the following 3 types:
   * Debug          Debug mode. Compiler flag is -g
   * Release        Release mode. Compiler flag is -O3 -DNDEBUG
   * RelWithDebInfo Debug+Release mode. Compiler flag is -g -O3 -DNDEBUG
* SIMD_ARCH
   Specify an optimization option. 
   * SSE4   Most conservative optimization
   * AVX    Use AVX instruction set 
   * AVX2   Use AVX2 instruction set 
   * NATIVE Use appropriate instruction set on your machine
* CMAKE_INSTALL_PREFIX:
   Specify the directory path which you intend to install..
* FFTW3_ROOT_DIR:
   If the fftw3 installed directory was not found by cmake with the default option, you should specify the path of it explicitly as below:
   e.g)  -DFFTW3_ROOT_DIR=/opt/fftw3
* EIGEN3_INCLUDE_DIR:
   If the Eigen-3.2.2 installed directory was not found by cmake with the default option, you should specify the path of it explicitly as below:
   e.g.)  -DEIGEN3_INCLUDE_DIR=/opt/Eigen-3.2.2


### Create API Document ###

 Create API document using Doxygen. Doxygen will create the bin/api directory in the libsakura/build directory which has the document of Sakura library in html. Move to libsakura/build directory and do as below:
 
   $ make apidoc


### Install ###

 If you need to install Sakura library in the directory such as /usr/local which requires root privileges, you must be a root user. Move to the libsakura/build directory and then do as below:

   # make install


### Unittest ###

 You can run the unittest of Sakura library. This allows you to verify your installation of Sakura library and make sure that Sakura library is working correctly. The unittest doesn't require a root privileges. To run the unittest, you should move in the libsakura/build directory and then run as below as normal user, not as root user:

   $ make test


 



