/**
 * @~
 * @mainpage Sakura Library API
 *
 * @section intro Introduction
 * Sakura Library(libsakura) is a library that ...
 *
 * @section getting Getting Sakura Library
 * 
 * @section link How to link libsakura to your application
 * Include <libsakura/sakura.h> from your sources.
 * @code
 * #include <libsakura/sakura.h>
 * @endcode
 *
 * Link your application with libsakura, for example, by
 * @verbatim
 cc/c++ -I<where libsakura resides>/include your sources -rdynamic -L<where libsakura resides>/lib -Wl,-rpath,<where libsakura resides>/lib -lsakura ...
 @endverbatim
 *
 * For example:
 * @verbatim
$ cat <<EOF >sample.c
#include <stdio.h>
#include <libsakura/sakura.h>

int main() {
	sakura_Status status = sakura_Initialize(NULL, NULL);
	if (sakura_Status_kOK != status) return 1;
	printf("%zu\n", sakura_GetAlignment());
	sakura_CleanUp ();
	return 0;
}
EOF
$ cc -I<where libsakura resides>/include sample.c -rdynamic -L <where libsakura resides>/lib -Wl,-rpath,<where libsakura resides>/lib -lsakura
$ ./a.out
 @endverbatim
 *
 * @section api API
 * Public API of Sakura Library is available @ref sakura.h "here".
 * All parameters marked as 'must-be-aligned' must be aligned at vector operation word boundary.
 * You can get the word size by calling @ref sakura_GetAlignment .
 * You are responsible to serialize calling functions which are not marked as 'MT-safe' as well.
 *
 * @section contact Contact us
 * Please send bug report to #######@@alma.nao.ac.jp if you find a bug.
 */
;
